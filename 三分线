/*
题目描述								
小赛很喜欢看A队和B队的篮球比赛。众所周知，篮球每回合根据投篮远近可以得2分或3分。如果投篮距离
小于d那么得2分，大于等于d得3分。我们将d记为三分线。每次小赛都喜欢通过改变三分线的大小来让自己
支持的A队获取更大的优势。现给出两个队伍投篮得分的距离，小赛希望你能够帮他选择一个合理的三分线，
使得A队优势最大。
输入
输入数据包含两行。
第一行第一个数为n(1≤n≤2*105)， 表示A队进球数，接下来n个正整数表示A队每次进球的投篮位置ai(1≤ai≤2*109)。 
第二行第一个数为m(1≤m≤2*105)，表示B队进球数，接下来m个正整数表示B队每次进球的投篮位置bi(1≤bi≤2*109)。
输出
一个整数，表示A队得分减去B队得分的最大值 
*/
#include<stdio.h>

#define MAX 220 

int swap(int *data, int start, int end);
void quickSort(int *data, int start, int end);

void quickSort(int *data, int start, int end) {
    int middle;
    
    if(start < end) {
        middle = swap(data, start, end);
        quickSort(data, start, middle);
        quickSort(data, middle+1, end);
    }
}

int swap(int *data, int start, int end) {
    int temp = data[start];
    int head = start;
    int tail = end-1;
    
    while(head < tail) {
        while(head < tail && data[tail] > temp) {
            tail--;
        }
        if(head < tail) {
            data[head++] = data[tail];
        }
        while(head < tail && data[head] < temp) {
            head++;
        } 
        if(head < tail) {
            data[tail--] = data[head];          
        }
    }
    data[head] = temp;
    return head;
}

int main(void) {
	int n; //A队进球个数
	int m; //B队进球个数
	int a[MAX] = {0}; //存储A队进球位置的数组 
	int b[MAX] = {0}; //存储B队进球位置的数组
	int i, j;
	int result = 0x80000000;
	int temp;
	
	//录入A队信息 
	scanf("%d", &n);
	for(i = 0; i < n; i++) {
		scanf("%d", &a[i]);
	}
	
	//录入B队信息 
	scanf("%d", &m);
	for(i = 0; i < m; i++) {
		scanf("%d", &b[i]);
	}
	
	//对两队数据进行排序
	quickSort(a, 0, n);
	quickSort(b, 0, m);
	
	//对可能的三分线依次进行尝试
	j = 0;
	for(i = 0; i < n; i++) {
		for(; j < m; j++) {
			if(b[j] >= a[i]) {
				break;
			}
		}
		temp = 2*i + 3*(n-i) - 2*j - 3*(m-j);
		if(temp > result) {
			result = temp;
		} 
	} 
	temp = n*2 - m*2;
	if(temp > result) {
		result = temp;
	}
	
	printf("%d", result);
	return 0;
}
