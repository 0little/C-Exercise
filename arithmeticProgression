/*
如果一个数列S满足对于所有的合法的i,都有S[i + 1] = S[i] + d, 这里的d也可以是负数和零,我们就称数列S为等差数列。
小易现在有一个长度为n的数列x,小易想把x变为一个等差数列。小易允许在数列上做交换任意两个位置的数值的操作,并且
交换操作允许交换多次。但是有些数列通过交换还是不能变成等差数列,小易需要判别一个数列是否能通过交换操作变成等
差数列
输入描述:
输入包括两行,第一行包含整数n(2 ≤ n ≤ 50),即数列的长度。
第二行n个元素x[i](0 ≤ x[i] ≤ 1000),即数列中的每个整数。
输出描述:
如果可以变成等差数列输出"Possible",否则输出"Impossible"。
*/

#include<stdio.h>

//快排
int swap(int *data, int start, int end);
void quickSort(int *data, int start, int end);

void quickSort(int *data, int start, int end) {
    int middle;
    
    if(start < end) {
        middle = swap(data, start, end);
        quickSort(data, start, middle);
        quickSort(data, middle+1, end);
    }
}

int swap(int *data, int start, int end) {
    int temp = data[start];
    int head = start;
    int tail = end-1;
    
    while(head < tail) {
        while(head < tail && data[tail] > temp) {
            tail--;
        }
        if(head < tail) {
            data[head++] = data[tail];
        }
        while(head < tail && data[head] < temp) {
            head++;
        } 
        if(head < tail) {
            data[tail--] = data[head];          
        }
    }
    data[head] = temp;
    return head;
} 

int main(void) {
	int a[51] = {0};
	int length;
	int i;
	int d;
	
	scanf("%d", &length);
	for(i = 0; i < length; i++) {
		scanf("%d", &a[i]);
	}
	
	quickSort(a, 0, length);
	
	d = a[1] - a[0];
	for(i = 2; i < length; i++) {
		if(a[i] - a[i-1] != d) {
			printf("Impossible");
			return 0;
		}
	}
	 
	printf("Possible");
	
	return 0;
}
