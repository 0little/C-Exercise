/*
擒贼先擒王（查并集算法）
现有九条关于犯罪团伙的线索，请判断出这一共是几个团伙 
*/
#include<stdio.h>

int f[1000], n, m, k, sum = 0;

void init() {
	int i;
	for(i = 1; i <= n; i++) {
		f[i] = i; //刚开始时各自为王，数组存储的是各自的下标 
	}
} 

//根据“擒贼先擒王”的原则，利用递归，找到犯罪团伙的最高领导人 
int getf(int v) {
	if(f[v] == v) {
		return v;
	} else {
		/*这里是路径压缩，每次在函数返回的时候，顺带把路上遇到的人的“BOSS”改为
		最后找到的祖宗编号，这样可以提高今后找犯罪团伙的最高领导人的速度*/
		f[v] = getf(f[v]);
		return f[v]; 
	}
} 

//这里是合并两子集合的函数
void merge(int v, int u) {
	int t1, t2;
	t1 = getf(v);
	t2 = getf(u);
	
	//判断两个节点是否具有同一祖先 
	if(t1 != t2) {
		f[t2] = t1; 
		//“靠左”原则，左边变成右边的BOSS，把右边的集合作为左边集合的子集合
		//经过路径压缩以后，将f[u]的根的值也赋值为v的祖先f[t1] 
	} 
} 

int main(void) {
	int i, x, y;
	scanf("%d%d", &n, &m);
	
	//初始化
	init();
	for(i = 1; i <= m; i++) {
		//开始合并犯罪团伙
		scanf("%d%d", &x, &y);
		merge(x, y); 
	} 
	
	//最后扫描有多少个独立的犯罪团伙
	for(i = 1; i <= n; i++) {
		if(f[i] == i) {
			sum++; 
		}
	} 
	
	printf("%d", sum);
	return 0;
}
