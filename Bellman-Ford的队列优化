/*Bellman-Ford的队列优化*/
#include<stdio.h>

int main(void) {
	int n, m, i, j, k;
	//u,v,w数组的大小要根据实际情况设定，要比m的最大值大1
	int u[8], v[8], w[8];
	//first要比n的最大值大1，next要比m的最大值大1
	int first[6], next[8];
	int dis[6] = {0}, book[6] = {0}; //book数组用于记录哪些点已经在队列中
	int que[101] = {0}, head = 1, tail = 1; //定义一个队列并初始化队列
	int inf = 9999999; //存储一个我们认为的无穷大值
	
	//录入顶点个数和边数
	scanf("%d%d", &n, &m);
	
	//初始化first
	for(i = 1; i <= n; i++) {
		first[i] = -1;
	} 
	//初始化dis
	for(i = 2; i <= n; i++) {
		dis[i] = inf;
	} 
	
	//将数据存入数组并创建邻接表
	for(i = 1; i <= m; i++) {
		scanf("%d%d%d", &u[i], &v[i], &w[i]);
		next[i] = first[u[i]]; 
		first[u[i]] = i;
	} 
	
	//一号顶点入队
	que[tail] = 1;
	tail++;
	book[1] = 1; //标记一号顶点已经入队
	
	//队列不为空时需要循环 
	while(head < tail) {
		k = first[que[head]]; //当前需要处理的队首顶点
		while(k != -1) { //扫描当前顶点的所有边
		 	if(dis[v[k]] > dis[u[k]] + w[k]) {
		 		dis[v[k]] = dis[u[k]] + w[k];
		 		if(book[v[k]] == 0) { //该顶点还不在队列中 
		 			que[tail] = v[k];
		 			tail++;
					book[v[k]] = 1;  //标记该顶点入队 
				 }
			 }
			 k = next[k];	
		} 
		//出队 
		book[que[head]]	 = 0;
		head++; 
	} 
	
	//输出一号顶点到其余各个顶点的最短路径
	for(i = 1; i <= n; i++) {
		printf("%d ", dis[i]);
	} 
	 
	return 0;
}
